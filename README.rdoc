== README
1) To set up Postgres include in the Gemfile the following line:
    gem 'pg', '0.17.0'
2) Create a 'ruby_user' account in Postgres

3) Log into postgres and create a database with the line:
    CREATE DATABASE trio_dev;
4) Install Postgres and set the owner of the database to be ruby_user by running the line:
    ALTER DATABASE trio_dev OWNER TO ruby_user;

== ANNOTATIONS
Annotations were used to keep track of what issues that need to be fixed, updated....basically a TODO list after everything is said and done.  

= RUBY ANNOTATION
To get a list of the default ruby annotations, run the following in the terminal:
rake notes

= CUSTOM ANNOTATION
The following custom annotations were used:
JAVASCRIPT_TEST - Used to denote where we need to test for AJAX/Javascript behavior
DUPLICATION_UPDATE - Noted where duplication in code, namely because of difference in languages (Javascript constants and Ruby Constants)

To get a list of the custom annotations in the project that I used run the following command in the terminal:
rake notes:custom ANNOTATION=JAVASCRIPT_TEST

= Resque
Installation

1) Installed Redis with:
  brew install redis
2) Added resque to Gemfile with line:
  gem 'resque'
3) Added file /lib/tasks/resque.rake
4) Start redis server with the following command in the terminal:
  redis-server
5) Started a worker with the following line ('mail' is the queue name)
  QUEUE=mail rake environment resque:work

or

  VVERBOSE=1 QUEUE=mail rake environment resque:work

  if you want the console to output everything

Reminder: Any changes to the environment and Redis needs to be restarted

= Production and Staging Environment
The Staging environment has a username and password set as local variables on Heroku.  The name of the environment variables are:
  AKUMAI_APP_USERNAME     # used for staging environment to password protect
  AKUMAI_APP_PASSWORD
  AKUMAI_EMAIL_USERNAME   # Google Apps username - used for sending out emails
  AKUMAI_EMAIL_PASSWORD   # Google Apps password - used for sending out emails

To set the environment variable on Heroku type the following command:
# Used for protecting stage app
  heroku config:set --app akumai-staging AKUMAI_APP_USERNAME=username
  heroku config:set --app akumai-staging AKUMAI_APP_PASSWORD=my_secret_password

# Sets environment type for staging app
  heroku config:set --app akumai-staging RAILS_ENV=staging
  heroku config:set --app akumai-staging RACK_ENV=staging

# Sets email settings
  heroku config:set --app akumai-staging AKUMAI_EMAIL_USERNAME=username
  heroku config:set --app akumai-staging AKUMAI_EMAIL_PASSWORD=my_secret_password
  heroku config:set --app akumai-staging AKUMAI_EMAIL_DOMAIN=domain

# Sets AWS S3 settings
  heroku config:set --app akumai-staging S3_BUCKET_NAME=akumai_staging
  heroku config:set --app akumai-staging AWS_ACCESS_KEY_ID=secret_key_id
  heroku config:set --app akumai-staging AWS_SECRET_ACCESS_KEY=secret_key


To set development environment variables, edit the .bash_profile file.  An example could be following:
  export AKUMAI_APP_USERNAME='my_secret_password'

Add RedisCloud:
  heroku addons:add rediscloud

= Staging + Production Environment
1) Setup staging environment
To push Github code to staging environment use the following command:
1a) Precompile any assets and verify that it'll work in production environment
  rake assets:precompile --trace RAILS_ENV=production
2) Push code to server
  git push staging master

3) Update any database changes
  heroku run rake db:migrate --app akumai-staging

To push Github code to production environment use the following command:
  git push production master

To stop app from serving requests:
  heroku ps:scale web=0 --app akumai-production

To restart services:
  heroku ps:scale web=1 --app akumai-production

To scale up resque workers (1 in this example):
  heroku ps:scale generalworker=1

Note: The worker 'generalworker' is defined in the Procfile.  You can have as many workers as you like ($$$).


== S3
Steps to save files to S3

# Saving file to S3
d = Dataset.new(:attachment => File.new("/tmp/hello_world.csv","r"))
d.save

# Importing file into Roo
s = Roo::CSV.new(d.attachment.url(:original, false))